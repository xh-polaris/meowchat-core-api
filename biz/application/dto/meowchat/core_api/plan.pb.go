// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: meowchat/core_api/plan.proto

package core_api

import (
	basic "github.com/xh-polaris/meowchat-core-api/biz/application/dto/basic"
	content "github.com/xh-polaris/meowchat-core-api/biz/application/dto/meowchat/content"
	user "github.com/xh-polaris/meowchat-core-api/biz/application/dto/meowchat/user"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Plan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id" form:"id" query:"id"`
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name" query:"name"`
	CoverUrl    string            `protobuf:"bytes,3,opt,name=coverUrl,proto3" json:"coverUrl" form:"coverUrl" query:"coverUrl"`
	Description string            `protobuf:"bytes,4,opt,name=description,proto3" json:"description" form:"description" query:"description"`
	PlanType    content.PlanType  `protobuf:"varint,5,opt,name=planType,proto3,enum=meowchat.content.PlanType" json:"planType" form:"planType" query:"planType"`
	Instruction string            `protobuf:"bytes,6,opt,name=instruction,proto3" json:"instruction" form:"instruction" query:"instruction"`
	StartTime   int64             `protobuf:"varint,7,opt,name=startTime,proto3" json:"startTime" form:"startTime" query:"startTime"`
	EndTime     int64             `protobuf:"varint,8,opt,name=endTime,proto3" json:"endTime" form:"endTime" query:"endTime"`
	Cat         *content.Cat      `protobuf:"bytes,9,opt,name=cat,proto3" json:"cat" form:"cat" query:"cat"`
	CommunityId string            `protobuf:"bytes,10,opt,name=communityId,proto3" json:"communityId" form:"communityId" query:"communityId"`
	User        *user.UserPreview `protobuf:"bytes,11,opt,name=user,proto3" json:"user" form:"user" query:"user"`
	ImageUrls   []string          `protobuf:"bytes,12,rep,name=imageUrls,proto3" json:"imageUrls" form:"imageUrls" query:"imageUrls"`
	CreateAt    int64             `protobuf:"varint,13,opt,name=createAt,proto3" json:"createAt" form:"createAt" query:"createAt"`
	MaxFish     int64             `protobuf:"varint,14,opt,name=maxFish,proto3" json:"maxFish" form:"maxFish" query:"maxFish"`
	NowFish     int64             `protobuf:"varint,15,opt,name=nowFish,proto3" json:"nowFish" form:"nowFish" query:"nowFish"`
	Summary     string            `protobuf:"bytes,16,opt,name=summary,proto3" json:"summary" form:"summary" query:"summary"`
	PlanState   content.PlanState `protobuf:"varint,17,opt,name=planState,proto3,enum=meowchat.content.PlanState" json:"planState" form:"planState" query:"planState"`
}

func (x *Plan) Reset() {
	*x = Plan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan) ProtoMessage() {}

func (x *Plan) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan.ProtoReflect.Descriptor instead.
func (*Plan) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{0}
}

func (x *Plan) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Plan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Plan) GetCoverUrl() string {
	if x != nil {
		return x.CoverUrl
	}
	return ""
}

func (x *Plan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Plan) GetPlanType() content.PlanType {
	if x != nil {
		return x.PlanType
	}
	return content.PlanType(0)
}

func (x *Plan) GetInstruction() string {
	if x != nil {
		return x.Instruction
	}
	return ""
}

func (x *Plan) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Plan) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Plan) GetCat() *content.Cat {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *Plan) GetCommunityId() string {
	if x != nil {
		return x.CommunityId
	}
	return ""
}

func (x *Plan) GetUser() *user.UserPreview {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Plan) GetImageUrls() []string {
	if x != nil {
		return x.ImageUrls
	}
	return nil
}

func (x *Plan) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *Plan) GetMaxFish() int64 {
	if x != nil {
		return x.MaxFish
	}
	return 0
}

func (x *Plan) GetNowFish() int64 {
	if x != nil {
		return x.NowFish
	}
	return 0
}

func (x *Plan) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Plan) GetPlanState() content.PlanState {
	if x != nil {
		return x.PlanState
	}
	return content.PlanState(0)
}

type Donation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plan       *Plan  `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan" form:"plan" query:"plan"`
	DonateTime int64  `protobuf:"varint,2,opt,name=donateTime,proto3" json:"donateTime" form:"donateTime" query:"donateTime"`
	DonateNum  int64  `protobuf:"varint,3,opt,name=donateNum,proto3" json:"donateNum" form:"donateNum" query:"donateNum"`
	DonateId   string `protobuf:"bytes,4,opt,name=donateId,proto3" json:"donateId" form:"donateId" query:"donateId"`
}

func (x *Donation) Reset() {
	*x = Donation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Donation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Donation) ProtoMessage() {}

func (x *Donation) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Donation.ProtoReflect.Descriptor instead.
func (*Donation) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{1}
}

func (x *Donation) GetPlan() *Plan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *Donation) GetDonateTime() int64 {
	if x != nil {
		return x.DonateTime
	}
	return 0
}

func (x *Donation) GetDonateNum() int64 {
	if x != nil {
		return x.DonateNum
	}
	return 0
}

func (x *Donation) GetDonateId() string {
	if x != nil {
		return x.DonateId
	}
	return ""
}

type GetPlanPreviewsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatId            *string                  `protobuf:"bytes,1,opt,name=catId,proto3,oneof" json:"catId" form:"catId" query:"catId"`
	OnlyUserId       *string                  `protobuf:"bytes,2,opt,name=onlyUserId,proto3,oneof" json:"onlyUserId" form:"onlyUserId" query:"onlyUserId"`
	OnlyCommunityId  *string                  `protobuf:"bytes,3,opt,name=onlyCommunityId,proto3,oneof" json:"onlyCommunityId" form:"onlyCommunityId" query:"onlyCommunityId"`
	IncludeGlobal    *bool                    `protobuf:"varint,4,opt,name=includeGlobal,proto3,oneof" json:"includeGlobal" form:"includeGlobal" query:"includeGlobal"`
	Keyword          *string                  `protobuf:"bytes,5,opt,name=keyword,proto3,oneof" json:"keyword" form:"keyword" query:"keyword"`
	PaginationOption *basic.PaginationOptions `protobuf:"bytes,6,opt,name=paginationOption,proto3" json:"paginationOption" form:"paginationOption" query:"paginationOption"`
}

func (x *GetPlanPreviewsReq) Reset() {
	*x = GetPlanPreviewsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanPreviewsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanPreviewsReq) ProtoMessage() {}

func (x *GetPlanPreviewsReq) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanPreviewsReq.ProtoReflect.Descriptor instead.
func (*GetPlanPreviewsReq) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{2}
}

func (x *GetPlanPreviewsReq) GetCatId() string {
	if x != nil && x.CatId != nil {
		return *x.CatId
	}
	return ""
}

func (x *GetPlanPreviewsReq) GetOnlyUserId() string {
	if x != nil && x.OnlyUserId != nil {
		return *x.OnlyUserId
	}
	return ""
}

func (x *GetPlanPreviewsReq) GetOnlyCommunityId() string {
	if x != nil && x.OnlyCommunityId != nil {
		return *x.OnlyCommunityId
	}
	return ""
}

func (x *GetPlanPreviewsReq) GetIncludeGlobal() bool {
	if x != nil && x.IncludeGlobal != nil {
		return *x.IncludeGlobal
	}
	return false
}

func (x *GetPlanPreviewsReq) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *GetPlanPreviewsReq) GetPaginationOption() *basic.PaginationOptions {
	if x != nil {
		return x.PaginationOption
	}
	return nil
}

type GetPlanPreviewsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plans []*Plan `protobuf:"bytes,1,rep,name=plans,proto3" json:"plans" form:"plans" query:"plans"`
	Total int64   `protobuf:"varint,2,opt,name=total,proto3" json:"total" form:"total" query:"total"`
	Token string  `protobuf:"bytes,3,opt,name=token,proto3" json:"token" form:"token" query:"token"`
}

func (x *GetPlanPreviewsResp) Reset() {
	*x = GetPlanPreviewsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanPreviewsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanPreviewsResp) ProtoMessage() {}

func (x *GetPlanPreviewsResp) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanPreviewsResp.ProtoReflect.Descriptor instead.
func (*GetPlanPreviewsResp) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{3}
}

func (x *GetPlanPreviewsResp) GetPlans() []*Plan {
	if x != nil {
		return x.Plans
	}
	return nil
}

func (x *GetPlanPreviewsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetPlanPreviewsResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetPlanDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId string `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId" form:"planId" query:"planId"`
}

func (x *GetPlanDetailReq) Reset() {
	*x = GetPlanDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanDetailReq) ProtoMessage() {}

func (x *GetPlanDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanDetailReq.ProtoReflect.Descriptor instead.
func (*GetPlanDetailReq) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{4}
}

func (x *GetPlanDetailReq) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

type GetPlanDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plan *Plan `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan" form:"plan" query:"plan"`
}

func (x *GetPlanDetailResp) Reset() {
	*x = GetPlanDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanDetailResp) ProtoMessage() {}

func (x *GetPlanDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanDetailResp.ProtoReflect.Descriptor instead.
func (*GetPlanDetailResp) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{5}
}

func (x *GetPlanDetailResp) GetPlan() *Plan {
	if x != nil {
		return x.Plan
	}
	return nil
}

type DeletePlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId string `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId" form:"planId" query:"planId"`
}

func (x *DeletePlanReq) Reset() {
	*x = DeletePlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlanReq) ProtoMessage() {}

func (x *DeletePlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlanReq.ProtoReflect.Descriptor instead.
func (*DeletePlanReq) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{6}
}

func (x *DeletePlanReq) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

type DeletePlanResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePlanResp) Reset() {
	*x = DeletePlanResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlanResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlanResp) ProtoMessage() {}

func (x *DeletePlanResp) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlanResp.ProtoReflect.Descriptor instead.
func (*DeletePlanResp) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{7}
}

type NewPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *string            `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id" form:"id" query:"id"`
	Name        *string            `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name" form:"name" query:"name"`
	Description *string            `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description" form:"description" query:"description"`
	CoverUrl    *string            `protobuf:"bytes,4,opt,name=coverUrl,proto3,oneof" json:"coverUrl" form:"coverUrl" query:"coverUrl"`
	PlanType    *content.PlanType  `protobuf:"varint,5,opt,name=planType,proto3,enum=meowchat.content.PlanType,oneof" json:"planType" form:"planType" query:"planType"`
	Instruction *string            `protobuf:"bytes,6,opt,name=instruction,proto3,oneof" json:"instruction" form:"instruction" query:"instruction"`
	StartTime   *int64             `protobuf:"varint,7,opt,name=startTime,proto3,oneof" json:"startTime" form:"startTime" query:"startTime"`
	EndTime     *int64             `protobuf:"varint,8,opt,name=endTime,proto3,oneof" json:"endTime" form:"endTime" query:"endTime"`
	CatId       *string            `protobuf:"bytes,9,opt,name=catId,proto3,oneof" json:"catId" form:"catId" query:"catId"`
	CommunityId *string            `protobuf:"bytes,10,opt,name=communityId,proto3,oneof" json:"communityId" form:"communityId" query:"communityId"`
	MaxFish     *int64             `protobuf:"varint,11,opt,name=maxFish,proto3,oneof" json:"maxFish" form:"maxFish" query:"maxFish"`
	ImageUrls   []string           `protobuf:"bytes,12,rep,name=imageUrls,proto3" json:"imageUrls" form:"imageUrls" query:"imageUrls"`
	Summary     *string            `protobuf:"bytes,13,opt,name=summary,proto3,oneof" json:"summary" form:"summary" query:"summary"`
	PlanState   *content.PlanState `protobuf:"varint,14,opt,name=planState,proto3,enum=meowchat.content.PlanState,oneof" json:"planState" form:"planState" query:"planState"`
}

func (x *NewPlanReq) Reset() {
	*x = NewPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPlanReq) ProtoMessage() {}

func (x *NewPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPlanReq.ProtoReflect.Descriptor instead.
func (*NewPlanReq) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{8}
}

func (x *NewPlanReq) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *NewPlanReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NewPlanReq) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *NewPlanReq) GetCoverUrl() string {
	if x != nil && x.CoverUrl != nil {
		return *x.CoverUrl
	}
	return ""
}

func (x *NewPlanReq) GetPlanType() content.PlanType {
	if x != nil && x.PlanType != nil {
		return *x.PlanType
	}
	return content.PlanType(0)
}

func (x *NewPlanReq) GetInstruction() string {
	if x != nil && x.Instruction != nil {
		return *x.Instruction
	}
	return ""
}

func (x *NewPlanReq) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *NewPlanReq) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *NewPlanReq) GetCatId() string {
	if x != nil && x.CatId != nil {
		return *x.CatId
	}
	return ""
}

func (x *NewPlanReq) GetCommunityId() string {
	if x != nil && x.CommunityId != nil {
		return *x.CommunityId
	}
	return ""
}

func (x *NewPlanReq) GetMaxFish() int64 {
	if x != nil && x.MaxFish != nil {
		return *x.MaxFish
	}
	return 0
}

func (x *NewPlanReq) GetImageUrls() []string {
	if x != nil {
		return x.ImageUrls
	}
	return nil
}

func (x *NewPlanReq) GetSummary() string {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return ""
}

func (x *NewPlanReq) GetPlanState() content.PlanState {
	if x != nil && x.PlanState != nil {
		return *x.PlanState
	}
	return content.PlanState(0)
}

type NewPlanResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId string `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId" form:"planId" query:"planId"`
}

func (x *NewPlanResp) Reset() {
	*x = NewPlanResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewPlanResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPlanResp) ProtoMessage() {}

func (x *NewPlanResp) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPlanResp.ProtoReflect.Descriptor instead.
func (*NewPlanResp) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{9}
}

func (x *NewPlanResp) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

type DonateFishReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId string `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId" form:"planId" query:"planId"`
	Fish   int64  `protobuf:"varint,2,opt,name=fish,proto3" json:"fish" form:"fish" query:"fish"`
}

func (x *DonateFishReq) Reset() {
	*x = DonateFishReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DonateFishReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DonateFishReq) ProtoMessage() {}

func (x *DonateFishReq) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DonateFishReq.ProtoReflect.Descriptor instead.
func (*DonateFishReq) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{10}
}

func (x *DonateFishReq) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *DonateFishReq) GetFish() int64 {
	if x != nil {
		return x.Fish
	}
	return 0
}

type DonateFishResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DonateFishResp) Reset() {
	*x = DonateFishResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DonateFishResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DonateFishResp) ProtoMessage() {}

func (x *DonateFishResp) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DonateFishResp.ProtoReflect.Descriptor instead.
func (*DonateFishResp) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{11}
}

type GetUserFishReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId *string `protobuf:"bytes,1,opt,name=userId,proto3,oneof" json:"userId" form:"userId" query:"userId"`
}

func (x *GetUserFishReq) Reset() {
	*x = GetUserFishReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserFishReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFishReq) ProtoMessage() {}

func (x *GetUserFishReq) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFishReq.ProtoReflect.Descriptor instead.
func (*GetUserFishReq) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{12}
}

func (x *GetUserFishReq) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

type GetUserFishResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fish int64 `protobuf:"varint,1,opt,name=fish,proto3" json:"fish" form:"fish" query:"fish"`
}

func (x *GetUserFishResp) Reset() {
	*x = GetUserFishResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserFishResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFishResp) ProtoMessage() {}

func (x *GetUserFishResp) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFishResp.ProtoReflect.Descriptor instead.
func (*GetUserFishResp) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{13}
}

func (x *GetUserFishResp) GetFish() int64 {
	if x != nil {
		return x.Fish
	}
	return 0
}

type ListFishByPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId           string                   `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId" form:"planId" query:"planId"`
	PaginationOption *basic.PaginationOptions `protobuf:"bytes,2,opt,name=paginationOption,proto3" json:"paginationOption" form:"paginationOption" query:"paginationOption"`
}

func (x *ListFishByPlanReq) Reset() {
	*x = ListFishByPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFishByPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFishByPlanReq) ProtoMessage() {}

func (x *ListFishByPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFishByPlanReq.ProtoReflect.Descriptor instead.
func (*ListFishByPlanReq) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{14}
}

func (x *ListFishByPlanReq) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *ListFishByPlanReq) GetPaginationOption() *basic.PaginationOptions {
	if x != nil {
		return x.PaginationOption
	}
	return nil
}

type ListFishByPlanResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users   []*user.UserPreview `protobuf:"bytes,1,rep,name=users,proto3" json:"users" form:"users" query:"users"`
	FishMap map[string]int64    `protobuf:"bytes,2,rep,name=fishMap,proto3" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" json:"fishMap" form:"fishMap" query:"fishMap"`
	Total   int64               `protobuf:"varint,3,opt,name=total,proto3" json:"total" form:"total" query:"total"`
}

func (x *ListFishByPlanResp) Reset() {
	*x = ListFishByPlanResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFishByPlanResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFishByPlanResp) ProtoMessage() {}

func (x *ListFishByPlanResp) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFishByPlanResp.ProtoReflect.Descriptor instead.
func (*ListFishByPlanResp) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{15}
}

func (x *ListFishByPlanResp) GetUsers() []*user.UserPreview {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ListFishByPlanResp) GetFishMap() map[string]int64 {
	if x != nil {
		return x.FishMap
	}
	return nil
}

func (x *ListFishByPlanResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ListDonateByUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           *string                  `protobuf:"bytes,1,opt,name=userId,proto3,oneof" json:"userId" form:"userId" query:"userId"`
	PaginationOption *basic.PaginationOptions `protobuf:"bytes,2,opt,name=paginationOption,proto3" json:"paginationOption" form:"paginationOption" query:"paginationOption"`
}

func (x *ListDonateByUserReq) Reset() {
	*x = ListDonateByUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDonateByUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDonateByUserReq) ProtoMessage() {}

func (x *ListDonateByUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDonateByUserReq.ProtoReflect.Descriptor instead.
func (*ListDonateByUserReq) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{16}
}

func (x *ListDonateByUserReq) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ListDonateByUserReq) GetPaginationOption() *basic.PaginationOptions {
	if x != nil {
		return x.PaginationOption
	}
	return nil
}

type ListDonateByUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Donations []*Donation `protobuf:"bytes,1,rep,name=donations,proto3" json:"donations" form:"donations" query:"donations"`
	Total     int64       `protobuf:"varint,2,opt,name=total,proto3" json:"total" form:"total" query:"total"`
	Token     string      `protobuf:"bytes,3,opt,name=token,proto3" json:"token" form:"token" query:"token"`
}

func (x *ListDonateByUserResp) Reset() {
	*x = ListDonateByUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDonateByUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDonateByUserResp) ProtoMessage() {}

func (x *ListDonateByUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDonateByUserResp.ProtoReflect.Descriptor instead.
func (*ListDonateByUserResp) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{17}
}

func (x *ListDonateByUserResp) GetDonations() []*Donation {
	if x != nil {
		return x.Donations
	}
	return nil
}

func (x *ListDonateByUserResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListDonateByUserResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CountDonateByUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId *string `protobuf:"bytes,1,opt,name=userId,proto3,oneof" json:"userId" form:"userId" query:"userId"`
}

func (x *CountDonateByUserReq) Reset() {
	*x = CountDonateByUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountDonateByUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountDonateByUserReq) ProtoMessage() {}

func (x *CountDonateByUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountDonateByUserReq.ProtoReflect.Descriptor instead.
func (*CountDonateByUserReq) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{18}
}

func (x *CountDonateByUserReq) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

type CountDonateByUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total" form:"total" query:"total"`
}

func (x *CountDonateByUserResp) Reset() {
	*x = CountDonateByUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountDonateByUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountDonateByUserResp) ProtoMessage() {}

func (x *CountDonateByUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountDonateByUserResp.ProtoReflect.Descriptor instead.
func (*CountDonateByUserResp) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{19}
}

func (x *CountDonateByUserResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CountDonateByPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId string `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId" form:"planId" query:"planId"`
}

func (x *CountDonateByPlanReq) Reset() {
	*x = CountDonateByPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountDonateByPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountDonateByPlanReq) ProtoMessage() {}

func (x *CountDonateByPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountDonateByPlanReq.ProtoReflect.Descriptor instead.
func (*CountDonateByPlanReq) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{20}
}

func (x *CountDonateByPlanReq) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

type CountDonateByPlanResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total" form:"total" query:"total"`
}

func (x *CountDonateByPlanResp) Reset() {
	*x = CountDonateByPlanResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meowchat_core_api_plan_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountDonateByPlanResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountDonateByPlanResp) ProtoMessage() {}

func (x *CountDonateByPlanResp) ProtoReflect() protoreflect.Message {
	mi := &file_meowchat_core_api_plan_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountDonateByPlanResp.ProtoReflect.Descriptor instead.
func (*CountDonateByPlanResp) Descriptor() ([]byte, []int) {
	return file_meowchat_core_api_plan_proto_rawDescGZIP(), []int{21}
}

func (x *CountDonateByPlanResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_meowchat_core_api_plan_proto protoreflect.FileDescriptor

var file_meowchat_core_api_plan_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6d, 0x65, 0x6f, 0x77, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x6d, 0x65, 0x6f, 0x77, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70,
	0x69, 0x1a, 0x16, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6d, 0x65, 0x6f, 0x77, 0x63,
	0x68, 0x61, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6d, 0x65, 0x6f, 0x77, 0x63, 0x68, 0x61, 0x74, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x04, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x6f, 0x77, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x03, 0x63, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x65, 0x6f, 0x77, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x61, 0x74, 0x52, 0x03, 0x63, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x6f,
	0x77, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x46, 0x69, 0x73,
	0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x46, 0x69, 0x73, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x77, 0x46, 0x69, 0x73, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6e, 0x6f, 0x77, 0x46, 0x69, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x6f, 0x77, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x91, 0x01, 0x0a, 0x08, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x04,
	0x70, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x6f,
	0x77, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6e,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64,
	0x6f, 0x6e, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x6e,
	0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x6f,
	0x6e, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x6e, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6e, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x22, 0xde, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x61,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x63, 0x61, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x6f, 0x6e, 0x6c,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x6f, 0x6e,
	0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x61,
	0x74, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x70, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x05, 0x70,
	0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x6f,
	0x77, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x22, 0x40, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x6f, 0x77, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04,
	0x70, 0x6c, 0x61, 0x6e, 0x22, 0x27, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x10, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0xaa, 0x05, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x6f, 0x77, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x61,
	0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x63, 0x61, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x6d, 0x61, 0x78, 0x46, 0x69, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0a, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x46, 0x69, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x65,
	0x6f, 0x77, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x0c, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x55, 0x72, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x61, 0x74, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x78, 0x46, 0x69,
	0x73, 0x68, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x25, 0x0a, 0x0b,
	0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x0d, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x46, 0x69, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x69, 0x73, 0x68,
	0x22, 0x10, 0x0a, 0x0e, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x46, 0x69, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x38, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x69, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66,
	0x69, 0x73, 0x68, 0x22, 0x71, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x73, 0x68, 0x42,
	0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x12, 0x44, 0x0a, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe6, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x69, 0x73, 0x68, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x65, 0x6f, 0x77, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x4c, 0x0a, 0x07, 0x66, 0x69, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x6d, 0x65, 0x6f, 0x77, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x73, 0x68, 0x42, 0x79, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66, 0x69, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x1a, 0x3a, 0x0a, 0x0c, 0x46, 0x69, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x83, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6e,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a,
	0x09, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x6f, 0x77, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64,
	0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3e, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x6e,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x15, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x6e,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x2e, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x6e, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x15, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x6e, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x83, 0x01, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x68, 0x70, 0x6f, 0x6c,
	0x61, 0x72, 0x69, 0x73, 0x2e, 0x69, 0x64, 0x6c, 0x67, 0x65, 0x6e, 0x2e, 0x6d, 0x65, 0x6f, 0x77,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x61, 0x70, 0x69, 0x42, 0x09, 0x50, 0x6c,
	0x61, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x68, 0x2d, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x73,
	0x2f, 0x6d, 0x65, 0x6f, 0x77, 0x63, 0x68, 0x61, 0x74, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x61,
	0x70, 0x69, 0x2f, 0x62, 0x69, 0x7a, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x64, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x6f, 0x77, 0x63, 0x68, 0x61, 0x74, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_meowchat_core_api_plan_proto_rawDescOnce sync.Once
	file_meowchat_core_api_plan_proto_rawDescData = file_meowchat_core_api_plan_proto_rawDesc
)

func file_meowchat_core_api_plan_proto_rawDescGZIP() []byte {
	file_meowchat_core_api_plan_proto_rawDescOnce.Do(func() {
		file_meowchat_core_api_plan_proto_rawDescData = protoimpl.X.CompressGZIP(file_meowchat_core_api_plan_proto_rawDescData)
	})
	return file_meowchat_core_api_plan_proto_rawDescData
}

var file_meowchat_core_api_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_meowchat_core_api_plan_proto_goTypes = []interface{}{
	(*Plan)(nil),                    // 0: meowchat.core_api.Plan
	(*Donation)(nil),                // 1: meowchat.core_api.Donation
	(*GetPlanPreviewsReq)(nil),      // 2: meowchat.core_api.GetPlanPreviewsReq
	(*GetPlanPreviewsResp)(nil),     // 3: meowchat.core_api.GetPlanPreviewsResp
	(*GetPlanDetailReq)(nil),        // 4: meowchat.core_api.GetPlanDetailReq
	(*GetPlanDetailResp)(nil),       // 5: meowchat.core_api.GetPlanDetailResp
	(*DeletePlanReq)(nil),           // 6: meowchat.core_api.DeletePlanReq
	(*DeletePlanResp)(nil),          // 7: meowchat.core_api.DeletePlanResp
	(*NewPlanReq)(nil),              // 8: meowchat.core_api.NewPlanReq
	(*NewPlanResp)(nil),             // 9: meowchat.core_api.NewPlanResp
	(*DonateFishReq)(nil),           // 10: meowchat.core_api.DonateFishReq
	(*DonateFishResp)(nil),          // 11: meowchat.core_api.DonateFishResp
	(*GetUserFishReq)(nil),          // 12: meowchat.core_api.GetUserFishReq
	(*GetUserFishResp)(nil),         // 13: meowchat.core_api.GetUserFishResp
	(*ListFishByPlanReq)(nil),       // 14: meowchat.core_api.ListFishByPlanReq
	(*ListFishByPlanResp)(nil),      // 15: meowchat.core_api.ListFishByPlanResp
	(*ListDonateByUserReq)(nil),     // 16: meowchat.core_api.ListDonateByUserReq
	(*ListDonateByUserResp)(nil),    // 17: meowchat.core_api.ListDonateByUserResp
	(*CountDonateByUserReq)(nil),    // 18: meowchat.core_api.CountDonateByUserReq
	(*CountDonateByUserResp)(nil),   // 19: meowchat.core_api.CountDonateByUserResp
	(*CountDonateByPlanReq)(nil),    // 20: meowchat.core_api.CountDonateByPlanReq
	(*CountDonateByPlanResp)(nil),   // 21: meowchat.core_api.CountDonateByPlanResp
	nil,                             // 22: meowchat.core_api.ListFishByPlanResp.FishMapEntry
	(content.PlanType)(0),           // 23: meowchat.content.PlanType
	(*content.Cat)(nil),             // 24: meowchat.content.Cat
	(*user.UserPreview)(nil),        // 25: meowchat.user.UserPreview
	(content.PlanState)(0),          // 26: meowchat.content.PlanState
	(*basic.PaginationOptions)(nil), // 27: basic.PaginationOptions
}
var file_meowchat_core_api_plan_proto_depIdxs = []int32{
	23, // 0: meowchat.core_api.Plan.planType:type_name -> meowchat.content.PlanType
	24, // 1: meowchat.core_api.Plan.cat:type_name -> meowchat.content.Cat
	25, // 2: meowchat.core_api.Plan.user:type_name -> meowchat.user.UserPreview
	26, // 3: meowchat.core_api.Plan.planState:type_name -> meowchat.content.PlanState
	0,  // 4: meowchat.core_api.Donation.plan:type_name -> meowchat.core_api.Plan
	27, // 5: meowchat.core_api.GetPlanPreviewsReq.paginationOption:type_name -> basic.PaginationOptions
	0,  // 6: meowchat.core_api.GetPlanPreviewsResp.plans:type_name -> meowchat.core_api.Plan
	0,  // 7: meowchat.core_api.GetPlanDetailResp.plan:type_name -> meowchat.core_api.Plan
	23, // 8: meowchat.core_api.NewPlanReq.planType:type_name -> meowchat.content.PlanType
	26, // 9: meowchat.core_api.NewPlanReq.planState:type_name -> meowchat.content.PlanState
	27, // 10: meowchat.core_api.ListFishByPlanReq.paginationOption:type_name -> basic.PaginationOptions
	25, // 11: meowchat.core_api.ListFishByPlanResp.users:type_name -> meowchat.user.UserPreview
	22, // 12: meowchat.core_api.ListFishByPlanResp.fishMap:type_name -> meowchat.core_api.ListFishByPlanResp.FishMapEntry
	27, // 13: meowchat.core_api.ListDonateByUserReq.paginationOption:type_name -> basic.PaginationOptions
	1,  // 14: meowchat.core_api.ListDonateByUserResp.donations:type_name -> meowchat.core_api.Donation
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}


func file_meowchat_core_api_plan_proto_init() {
	if File_meowchat_core_api_plan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_meowchat_core_api_plan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowchat_core_api_plan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Donation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowchat_core_api_plan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanPreviewsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowchat_core_api_plan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanPreviewsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowchat_core_api_plan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowchat_core_api_plan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowchat_core_api_plan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowchat_core_api_plan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlanResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowchat_core_api_plan_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowchat_core_api_plan_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewPlanResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowchat_core_api_plan_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DonateFishReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowchat_core_api_plan_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DonateFishResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowchat_core_api_plan_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserFishReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowchat_core_api_plan_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserFishResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowchat_core_api_plan_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFishByPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowchat_core_api_plan_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFishByPlanResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowchat_core_api_plan_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDonateByUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowchat_core_api_plan_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDonateByUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowchat_core_api_plan_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountDonateByUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowchat_core_api_plan_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountDonateByUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowchat_core_api_plan_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountDonateByPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meowchat_core_api_plan_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountDonateByPlanResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_meowchat_core_api_plan_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_meowchat_core_api_plan_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_meowchat_core_api_plan_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_meowchat_core_api_plan_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_meowchat_core_api_plan_proto_msgTypes[18].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_meowchat_core_api_plan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meowchat_core_api_plan_proto_goTypes,
		DependencyIndexes: file_meowchat_core_api_plan_proto_depIdxs,
		MessageInfos:      file_meowchat_core_api_plan_proto_msgTypes,
	}.Build()
	File_meowchat_core_api_plan_proto = out.File
	file_meowchat_core_api_plan_proto_rawDesc = nil
	file_meowchat_core_api_plan_proto_goTypes = nil
	file_meowchat_core_api_plan_proto_depIdxs = nil
}
