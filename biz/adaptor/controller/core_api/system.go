// Code generated by hertz generator.

package core_api

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	core_api "github.com/xh-polaris/meowchat-core-api/biz/application/dto/meowchat/core_api"
)

// GetAdmins .
// @router /notice/get_admins [GET]
func GetAdmins(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetAdminsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.GetAdminsResp)

	c.JSON(consts.StatusOK, resp)
}

// NewAdmin .
// @router /notice/new_admin [POST]
func NewAdmin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.NewAdminReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.NewAdminResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteAdmin .
// @router /notice/delete_admin [POST]
func DeleteAdmin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.DeleteAdminReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.DeleteAdminResp)

	c.JSON(consts.StatusOK, resp)
}

// ListApply .
// @router /notice/list_apply [POST]
func ListApply(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.ListApplyReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.ListApplyResp)

	c.JSON(consts.StatusOK, resp)
}

// HandleApply .
// @router /notice/handle_apply [POST]
func HandleApply(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.HandleApplyReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.HandleApplyResp)

	c.JSON(consts.StatusOK, resp)
}

// GetNews .
// @router /notice/get_news [GET]
func GetNews(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetNewsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.GetNewsResp)

	c.JSON(consts.StatusOK, resp)
}

// NewNews .
// @router /notice/new_news [POST]
func NewNews(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.NewNewsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.NewNewsResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteNews .
// @router /notice/remove_news [POST]
func DeleteNews(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.DeleteNewsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.DeleteNewsResp)

	c.JSON(consts.StatusOK, resp)
}

// GetNotices .
// @router /notice/get_notices [GET]
func GetNotices(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetNoticesReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.GetNoticesResp)

	c.JSON(consts.StatusOK, resp)
}

// NewNotice .
// @router /notice/new_notice [POST]
func NewNotice(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.NewNoticeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.NewNoticeResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteNotice .
// @router /notice/remove_notice [POST]
func DeleteNotice(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.DeleteNoticeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.DeleteNoticeResp)

	c.JSON(consts.StatusOK, resp)
}

// ListCommunity .
// @router /community/list_community [GET]
func ListCommunity(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.ListCommunityReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.ListCommunityResp)

	c.JSON(consts.StatusOK, resp)
}

// NewCommunity .
// @router /community/new_community [POST]
func NewCommunity(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.NewCommunityReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.NewCommunityResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteCommunity .
// @router /community/delete_community [POST]
func DeleteCommunity(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.DeleteCommunityReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.DeleteCommunityResp)

	c.JSON(consts.StatusOK, resp)
}

// GetUserRoles .
// @router /role/get_user_roles [GET]
func GetUserRoles(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetUserRolesReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.GetUserRolesResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateCommunityAdmin .
// @router /role/update_community_admin [POST]
func UpdateCommunityAdmin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.UpdateCommunityAdminReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.UpdateCommunityAdminResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateSuperAdmin .
// @router /role/update_super_admin [POST]
func UpdateSuperAdmin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.UpdateSuperAdminReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.UpdateSuperAdminResp)

	c.JSON(consts.StatusOK, resp)
}

// GetUserByRole .
// @router /role/get_user_by_role [GET]
func GetUserByRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.RetrieveUserPreviewReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.RetrieveUserPreviewResp)

	c.JSON(consts.StatusOK, resp)
}

// CreateApply .
// @router /role/create_apply [POST]
func CreateApply(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.CreateApplyReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core_api.CreateApplyResp)

	c.JSON(consts.StatusOK, resp)
}
